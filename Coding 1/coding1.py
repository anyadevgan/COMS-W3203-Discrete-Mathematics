# -*- coding: utf-8 -*-
"""coding1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-eNO00mtFtLa9n9fdQ93onAsTcBKWpO
"""

# COMS3203 DISCRETE MATHEMATICS
# CODING ASSIGNMENT 1

# YOUR NAME(s): SOPHIE JOHNSON, ANYA DEVGAN
# YOUR UNI(s): smj2173, ad3706

'''
Returns the number of vowels in a given string s.

Parameters:
s (string): lowercase string without spaces

Returns:
int: number of vowels

'''
def vowel_counter(s):
    suba="a"
    a=s.count(suba)
    sube="e"
    e=s.count(sube)
    subi="i"
    i=s.count(subi)
    subo="o"
    o=s.count(subo)
    subu="u"
    u=s.count(subu)
    counts = a+e+i+o+u
    return counts # int

'''
Implements the 'sometimes y' rule on given string s.

Parameters:
s (string): The target number to generate primes up to.

Returns:
boolean: True/False depending on whether the string has y
int: number of vowels in the string originally (wihout sometimes y rule)
int: number of vowels in the string after sometimes y rule
'''
def sometimes_y(s):
    original_count = vowel_counter(s)
    y_in_string = False

    for letter in s:
      if letter == 'y':
        y_in_string = True
    
    if y_in_string == True and s[len(s)-1] == 'y':
      new_count = original_count + 1
    else:
      new_count = original_count

    return y_in_string, original_count, new_count # boolean, int, int

'''
Returns a list of the number of vowels in each word in a sentence.

Parameters:
sentence (string): A string of a sentence.

Returns:
list: a list of the number of vowels for each word in the sentence.
'''
def sentence_counter(sentence):
    # convert all characters to lower case
    sentence = sentence.lower()
    # split the sentence by <whitespace>
    sentence_list = sentence.split()
    # simplify each word in sentence by stripping it of special characters
    for j in range(0,len(sentence_list)):
      sentence_list[j] = sentence_list[j].strip(".,!?")
    # list the number of vowels for each word 
    counts = []
    for i in range(0,len(sentence_list)):
      y, oc, nc = sometimes_y(sentence_list[i])
      counts.append(nc)
    return counts # list

'''
Returns an an integer that is the nth Fibonacci number.

Parameters:
n (int): The nth Fibonacci number you want.

Returns:
int: the nth fibonacci number.
'''
def recursive_fib(n):
    if n < 0:
      print("invalid input")
    if n <= 1:
       fib_n = n
    else:
       fib_n = (recursive_fib(n-1) + recursive_fib(n-2))
    return fib_n # int

'''
Returns an an integer that is the nth Fibonacci number.

Parameters:
n (int): The nth Fibonacci number you want.

Returns:
int: the nth fibonacci number.
'''
def iterative_fib(n):
    # WRITE YOUR CODE HERE
    x = 0
    y = 1
    for i in range(n):
        x,y = y,x+y
    fib_n = x
    return fib_n # int

'''
Returns whether two sentences are synonyms or not, given a list of synonyms.

Parameters:
synonyms (list): A list of tuples of the synonyms you should store.
sentences (tuple): A 2-tuple containing two sentences you want to compare.

Returns:
boolean: Whether the sentences are synonyms or not.
'''
def synonym_checker(synonyms, sentences):
    Dict = {}
    
    #creating dictionary by adding tuples from the synonyms list
    for i in range(0,len(synonyms)):
      Dict[synonyms[i][0]] = synonyms[i][1]
    
    #breaking sentences into parts and putting parts into lists
    sentence_1 = sentences[0]
    sentence_1 = sentence_1.lower()
    sentence_1_list = sentence_1.split()
    for j in range(0,len(sentence_1_list)):
      sentence_1_list[j] = sentence_1_list[j].strip(".,!?")

    sentence_2 = sentences[1]
    sentence_2 = sentence_2.lower()
    sentence_2_list = sentence_2.split()
    for k in range(0,len(sentence_2_list)):
      sentence_2_list[k] = sentence_2_list[k].strip(".,!?")
    
    #comparing the sentence parts
    if len(sentence_1_list) == len(sentence_2_list):
      for m in range(0,len(sentence_1_list)):
          if sentence_1_list[m] == sentence_2_list[m]:
            is_synonym = True
          else: #when sentence_1_list[j] != sentence_2_list[j]
            if sentence_1_list[m] in Dict and Dict[sentence_1_list[m]] == sentence_2_list[m]:
              is_synonym = True
            elif sentence_2_list[m] in Dict and Dict[sentence_2_list[m]] == sentence_1_list[m]:
             is_synonym = True
            else:
              is_synonym = False
              break
    else:
      is_synonym = False

    return is_synonym # boolean

######################################################################
### DO NOT TURN IN AN ASSIGNMENT WITH ANYTHING BELOW HERE MODIFIED ###
######################################################################
if __name__ == '__main__':
    print("#######################################")
    print("Welcome to Coding 1: Python Introduction!")
    print("#######################################")
    print()

    print("---------------------------------------")
    print("PART A: Vowel Counting")
    print("---------------------------------------")
    vowel_tests = [['abcdef', 'abcdefy', 'abc def y'], ['cat', 'catty', 'The big cat.'], ['dog', 'ydog', 'I love dogs!']]
    vowel_answers = [[2, (True, 2, 3), [1, 1, 1]], [1, (True, 1, 2), [1, 1, 1]], [1, (True, 1, 1), [1, 2, 1]]]
    for count, test in enumerate(vowel_tests):
        if(vowel_answers[count][0] == vowel_counter(test[0]) and
        vowel_answers[count][1] == sometimes_y(test[1]) and
        vowel_answers[count][2] == sentence_counter(test[2])):
            passed = "PASSED!"
        else:
            passed = "FAILED!"

        print("Test #{}: {}".format(count + 1, passed))
        print("Vowel Count (Correct): ", vowel_answers[count][0])
        print("Vowel Count (Your Answer): ", vowel_counter(test[0]))
        print("Vowel Count with y (Correct): ", vowel_answers[count][1])
        print("Vowel Count with y (Your Answer): ", sometimes_y(test[1]))
        print("Sentence Count (Correct): ", vowel_answers[count][2])
        print("Sentence Count (Your Answer): ", sentence_counter(test[2]))

    print("---------------------------------------")
    print("PART B: Fibonacci")
    print("---------------------------------------")
    tests = [[1, 1], [4, 4], [10, 10]]
    answers = [[1, 1], [3, 3], [55, 55]]
    for count, test in enumerate(tests):
        if(answers[count][0] == recursive_fib(test[0]) and
            answers[count][1] == iterative_fib(test[1])):
            passed = "PASSED!"
        else:
            passed = "FAILED!"

        print("Test #{}: {}".format(count + 1, passed))
        print("Recursive Fibonacci (Correct): ", answers[count][0])
        print("Recursive Fibonacci (Your Answer): ", recursive_fib(test[0]))
        print("Iterative Fibonacci (Correct): ", answers[count][1])
        print("Iterative Fibonacci (Your Answer): ", iterative_fib(test[1]))


    print("---------------------------------------")
    print("PART C: Synonym Checker")
    print("---------------------------------------")
    tests = [
        [[("movie", "film"), ("reviews", "ratings")], ("I heard that movie got good ratings.", "I heard that film got good reviews.")],
        [[("movie", "film")], ("I heard that movie got good ratings.", "I heard that film got good reviews.")],
        [[("movie", "film"), ("reviews", "ratings")], ("I heard that work of cinema got good ratings.", "I heard that film got good reviews.")]
    ]
    answers = [True, False, False]
    for count, test in enumerate(tests):
        if(answers[count] == synonym_checker(test[0], test[1])):
            passed = "PASSED!"
        else:
            passed = "FAILED!"

        print("Test #{}: {}".format(count + 1, passed))
        print("Synonyms:", test[0])
        print("Sentences:", test[1])
        print("Synonym? (Correct): ", answers[count])
        print("Synonym? (Your Answer): ", synonym_checker(test[0], test[1]))