# -*- coding: utf-8 -*-
"""coding2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Us4iQ4mT8lKcYunoOzYLVQlM-YCA4z55
"""

# COMS3203 DISCRETE MATHEMATICS
# CODING ASSIGNMENT 2
#
# Before submitting the file to gradescope make sure of the following:
# 1. The name of the file is coding2.py 
# 2. Nothing below the line `if __name__="__main__":` is changed 
# 3. Make sure there are no indentation errors and that the code compiles on your
#    end
#
# YOUR NAME: Sophie Johnson, Anya Devgan
# YOUR UNI: smj2173, ad3706

import itertools

'''
Returns the proposition, formatted in string form.

Parameters:
prop (list): proposition in nested list form

Returns:
string: 'prop' in string form
'''
def format_prop(prop):
    # BASE CASE: #####################################
    if 1 == len(prop):
        return prop[0]
    ##################################################

    # UNARY OPERATOR (not): ##########################
    if 2 == len(prop):
        # the following two variable declarations are missing LHS #
        op = prop[0]
        var = format_prop(prop[1]) 

        if "not" == op:
            formatted_prop = "(" + "not" + " " + var + ")"
            return formatted_prop
        else:
            raise ValueError("Unary proposition is not not.")
    ##################################################

    # BINARY OPERATOR (and, or, if, iff, xor): #######
    elif 3 == len(prop):
        # the following three variable declarations are missing LHS #
        op = prop[0]
        var1 = format_prop(prop[1]) 
        var2 = format_prop(prop[2])

        if op not in ("if", "iff", "or", "and", "xor"):
            raise ValueError("Binary proposition does not have valid connectives.")

        # change "if" and "iff" representation
        if "if" == op:
            op = "->"
        elif "iff" == op:
            op = "<->"

        # format left and right sides of a binary operation
        left_prop = var1
        right_prop = var2

        formatted_prop = "(" + left_prop + " " + op + " " + right_prop + ")"
        return formatted_prop
    ####################################################

    # INVALID LENGTH ####################################
    else:
        raise ValueError("Proposition incorrect length.")
    #####################################################

'''
Returns the evaluation (True or False) as an int (1 or 0) of the proposition,
given a proposition in list form and a list of values for each atomic variable.

Parameters:
prop (list): proposition in nested list form.
values (list): list of integers, either 0 or 1 indicating False or True for
each atomic variable in the proposition. 

Returns:
int: 0 for False, 1 for True
'''
def eval_prop(prop, values):
    # BASE CASE: #####################################
    if 1 == len(prop):
        # fill in here # 
        atomic_prop_id = (prop[0])[1] # ignore the first character of your proposition variable
        return values[(int)(atomic_prop_id)-1]
    ##################################################

    # UNARY OPERATOR (not): ##########################
    elif 2 == len(prop):
        # the following two variable declarations are missing LHS #
        op = prop[0] # missing LHS
        var = eval_prop(prop[1],values) # missing LHS

        if "not" == op:
            return (int)(not var)
        else:
            raise ValueError("Unary proposition is not not.")
    ##################################################

    # BINARY OPERATOR (and, or, if, iff, xor): #######
    elif 3 == len(prop):
        # the following three variable declarations are missing LHS #
        op = prop[0] 
        var1 = prop[1] 
        var2 = prop[2] 

        if op not in ("if", "iff", "or", "and", "xor"):
            raise ValueError("Binary proposition does not have valid connectives.")

        # evaluate left and right sides of a binary operation
        left = eval_prop(var1, values)
        right = eval_prop(var2, values)

        # the line here is an example. fill in the rest.
        if "and" == op:
            return int(left and right)
        elif "xor" == op:
            return (int(left) ^ int(right))
        elif "or" == op:
            return int(left or right)
        elif "if" == op:
            if(left == 0 or (left == 1 and right == 1)):
              return 1
            else:
              return 0
        else: # "iff" == op #
            if left == right:
              return 1
            else:
              return 0

    # INVALID LENGTH ####################################
    else:
        raise ValueError("Proposition incorrect length.")
    #####################################################

'''
Prints a truth table given a proposition in nested list form and 
an integer defining the number of atomic variables. 

Parameters:
prop (list): proposition in nested list form.
n_var (int): the number of atomic variables in prop.  

Returns:
None
'''
def print_table(prop, n_var):
  counter = 0
  while (counter < n_var):
    print("p" + str(counter + 1) + "\t" + "|", end = '')
    counter = counter + 1
  
  expression = format_prop(prop)
  print(expression)

  table = list(itertools.product([0,1], repeat = n_var))
  
  for x in table:
    y = list(x)
    print(x[0], end = "")
    print(f"\t", end = "|")
    print(x[1], end = "")
    print(f"\t", end = "|")
    print(x[2], end = "")
    print(f"\t", end = "|")
    print(eval_prop(prop, y))

  pass


if __name__ == '__main__':
    print("---------------------------------------")
    print("Coding Assignment 2: Propositional Logic")
    print("---------------------------------------")

    print()
    values = [1]
    prop = ["not", ["p1"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)

    print()
    values = [1, 1]
    prop = ["and", ["p1"], ["p2"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)

    print()
    values = [1, 0]
    prop = ["iff", ["p1"],["p2"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)

    print()
    values = [1, 1, 0]
    prop = ["if", ["and", ["p1"], ["not", ["p2"]]], ["p3"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    prop_str = format_prop(prop)
    print("Evaluating proposition p =", prop_str)
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)

    print()
    values = [1, 0, 1]
    prop = ["iff", ["p1"], ["or", ["p2"], ["not", ["p3"]]]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)

    print("---------------------------------------------------")
    print("Table:")
    print_table(["if", ["and", ["p1"], ["not", ["p2"]]], ["p3"]], 3)

