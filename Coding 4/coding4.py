# -*- coding: utf-8 -*-
"""coding4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13di4J2bYKkHwVui6YdNsdBXFRpYJR9wx
"""

#@title
# COMS3203 DISCRETE MATHEMATICS
# CODING ASSIGNMENT 4

# YOUR NAME(s): Sophie Johnson, Anya Devgan
# YOUR UNI(s): smj2173, ad3706

#import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
#from numpy import random
#from matplotlib import colors
#from matplotlib.ticker import PercentFormatter
import math
import random
import itertools
import time

##### Part 1A #########
'''
Parameters:
n: the index of the row of the pascal triangle

Returns:
list: list of length n+1, where each element corresponds to the required row of Pascal triangle
'''
def pascal_triangle(n):
    # WRITE YOUR CODE HERE
    mylist = [1,1]
    if n==0:
      return [1]
    if n==1:
      return mylist
    temp = [1,1]
    for i in range(2, n+1):
      mylist = temp
      temp = [1]
      for x in range(len(mylist)-1):
        temp.append(mylist[x] + mylist[x+1])
      temp.append(1)
     
    return temp # list of length n +1 , where each element corresponds to the required row of Pascal triangle


##### Part 1B (1) ##### 
'''
Parameters:
interval: tuple (L, R) indicating the range of integers. Both L & R are inclusive
divisors: list of divisors 

Return:
int: number of integers in the interval that are divisble  
'''
def divisible_atleast_once(interval, divisors):
    # interval: tuple (L, R)
    # divisors: array of divisors
        
    count = 0

    for i in range(0,len(divisors)):
      temp = np.arange(divisors[i],interval[1]+1,divisors[i]) #counts the number of multiples for each divisor
      count = count + len(temp)

    return count # count of integes in the  interval that are divisible atleast once by any of the divisors present in the list divisors


##### EXTRA CREDIT: Part 1B (2) #####
##### NOTE: Only uncomment the function signatures below if you are planning to do this part #####################
'''
Parameters:
interval: tuple (L, R) indicating the range of integers. Both L & R are inclusive
divisors: list of divisors 

Return:
int: number of integers in the interval that are divisble  
float: time spent in executing the function
'''
#def check_efficient_runs(interval, divisors):
#    # interval: tuple (L, R)
#    # divisors: array of divisors
#    start = time.time()
#    ans = divisible_atleast_once(interval, divisors)
#    end = time.time()
#    return (ans, end - start)

##### Part 2A (a) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
list: list of length 2, where list[0] is the frequency of Tails and list[1] is the frequency of Heads
'''
def large_numbers_coin(n):
    myList = []
    p = 0.5
    x = np.random.binomial(n, p)
    myList.append(x)
    myList.append(n-x)
    return myList

##### Part 2A (b) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
list: list of length 6, where list[0] is the frequency of rolling 1 and list[1] is the frequency of rolling 2, etc...
'''
def large_numbers_dice(n):
    mylist = []
    p = 1/6
    roll1 = 0
    roll2 = 0
    roll3 = 0
    roll4 = 0
    roll5 = 0
    roll6 = 0

    for i in range(1, n+1):
      roll = random.randint(1,6)
      if roll==1:
        roll1 = roll1 + 1
      if roll==2:
        roll2 = roll2 + 1
      if roll==3:
        roll3 = roll3 + 1
      if roll==4:
        roll4 = roll4 + 1
      if roll==5:
        roll5 = roll5 + 1
      if roll==6:
        roll6 = roll6 + 1

    mylist.append(roll1)
    mylist.append(roll2)
    mylist.append(roll3)
    mylist.append(roll4)
    mylist.append(roll5)
    mylist.append(roll6)

    return mylist # list of experiment results

##### Part 2A (c) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
list: list of length 2, where list[0] is the frequency of Tails and list[1] is the frequency of Heads
'''
def large_numbers_rigged_dice(n):
  mylist = []
  distribution = [0.25, 0.25, 0.125, 0.125, 0.125, 0.125]
  roll1 = 0
  roll2 = 0
  roll3 = 0
  roll4 = 0
  roll5 = 0
  roll6 = 0
  
  for i in range(1, n+1):
    roll = np.random.choice(np.arange(1,7), p=distribution)
    if roll==1:
      roll1 = roll1 + 1
    if roll==2:  
      roll2 = roll2 + 1
    if roll==3:
      roll3 = roll3 + 1
    if roll==4:
      roll4 = roll4 + 1
    if roll==5:
      roll5 = roll5 + 1
    if roll==6:
      roll6 = roll6 + 1

  mylist.append(roll1)
  mylist.append(roll2)
  mylist.append(roll3)
  mylist.append(roll4)
  mylist.append(roll5)
  mylist.append(roll6)

  return mylist # list of experiment results

##### Part 2A (d) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
none
'''

def large_numbers_histogram(n):
    bin_edges = [i for i in range(1,6,1)]
    plt.hist(large_numbers_dice(n), bins=bin_edges, edgecolor ='black')
    plt.xticks(bin_edges)
    plt.yticks(bin_edges[:-1])
    plt.xlabel('Dice Number')
    plt.ylabel('Number of Times Rolled')
    plt.show()

    #newlist = large_numbers_dice(n)
    #bins = [1,2,3,4,5,6]
    #n, bins, patches = plt.hist(newlist, bins, facecolor = 'blue', alpha=0.5)
    #plt.show()

    return # no need to return anything, just plot and screenshot (include in PDF)

##### Part 2A (e) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
none
'''
def large_numbers_plot(n):
    return # no need to return anything, just plot and screenshot (include in PDF)


##### EXTRA CREDIT: Part 2B (a) #####
##### NOTE: Only uncomment the function signatures below if you are planning to do this part #####################

'''
Parameters:
n: the number of trials/observations in a sample X_1, ... X_n
k: the number of times we draw from the distribution of averages

Returns:
none
'''
def clt_uniform(n, k):
  means = []
  bins = [i for i in range (-20,21)]
  
  for j in range(k):
    mean = np.mean(np.random.uniform(-20,20,n))
    means.append(mean)
  
  plt.hist(means, bins = bins, edgecolor = 'black')
  plt.title(label = 'Central Limit Theorem: Uniform')
  plt.xlabel('Sample Mean')
  plt.ylabel('Frequency')
  plt.show()

  return # no need to anything, just plot and screenshot (include in PDF)

##### Part 2B (b) #####
'''
Parameters:
n: the number of trials/observations in sample

Returns:
none
'''
def clt_gamma(n,k):
    means = []

    for i in range(k):
      mean = np.mean(np.random.gamma(2,2,n))
      means.append(mean)
    
    plt.hist(means, bins = 100, edgeColor = 'black', range = (-10,10))
    plt.title(label = 'Central Limit Theorem: Gamma')
    plt.xlabel('Sample Mean')
    plt.ylabel('Frequency')
    plt.show()

    return #no need to return anything, just plot and screenshot (include in PDF)
 

### DO NOT TURN IN AN ASSIGNMENT WITH ANYTHING BELOW HERE MODIFIED ###
if __name__ == '__main__':
    
    print("---------------------------------------")
    print("PART 1A: Nth Row of Pascal Triangle")
    print("---------------------------------------")
    print("Test Case 1 (Row 4): ")
    pascal_student_4 = pascal_triangle(4)
    print("Test Case 1 (Your Answer):", pascal_student_4)
    print("Expected Answer: ", [1, 4, 6, 4, 1])
    print()
    print("Test Case 2 (Row 6): ")
    pascal_student_6 = pascal_triangle(6)
    print("Test Case 2 (Your Answer):", pascal_student_6)
    print("Expected Answer: ", [1, 6, 15, 20, 15, 6, 1])
    print("---------------------------------------")

    print("---------------------------------------")
    print("PART 1B: Principle of Inclusion Exclusion")
    print("---------------------------------------")
    print("Part (a)")
    print("---------------------------------------")
    interval = (1,10)
    divisors = [2,3]
    print("Test Case 1: ", interval, divisors)
    divisible_student_1 = divisible_atleast_once(interval, divisors)
    print("Test Case 1 (Your Answer):", divisible_student_1)
    print("Expected Answer: ", 7)
    print()
    interval = (1956, 9013)
    divisors = [307, 419]
    print("Test Case 2: ", interval, divisors)
    divisble_student_2 = divisible_atleast_once(interval, divisors)
    print("Test Case 2 (Your Answer):", divisble_student_2)
    print("Expected Answer: ", 40)
    print()
    interval = (4014, 6707)
    divisors = [31, 5, 191, 233, 373]
    print("Test Case 3: ", interval, divisors)
    divisble_student_3 = divisible_atleast_once(interval, divisors)
    print("Test Case 3 (Your Answer):", divisble_student_3)
    print("Expected Answer: ", 633)
    print("---------------------------------------")
    

    # ONLY UNCOMMENT THIS TEST CASE IF YOU ARE PLANNING TO DO THE EXTRA CREDIT
    #'''
    print("Part (b)")
    print("---------------------------------------")
    interval = (136611947,842842918)
    divisors = [487, 37, 13, 947, 977, 463, 409, 919, 139, 491, 43, 193, 461, 787, 5, 211]
    print("Test Case 1: ", interval, divisors)
    efficient_1_ans, efficient_1_time = check_efficient_runs(interval, divisors)
    print("Test Case 1 (Your Answer):", efficient_1_ans)
    print("Test Case 1 (Time Spent):", efficient_1_time)
    print("Expected Answer: ", 226443102)
    print()
    #'''

    print("---------------------------------------")
    print("PART 2A: Law of Large Numbers")
    print("---------------------------------------")
    print("Part (a)")
    print("---------------------------------------")
    print("Test Case 1 (100 trials): ")
    student_ans_1 = large_numbers_coin(100)
    print("Test Case 1 (Your Answer):", student_ans_1)
    print()
    print("Test Case 2 (500 trials): ")
    student_ans_2 = large_numbers_coin(500)
    print("Test Case 2 (Your Answer):", student_ans_2)
    print("---------------------------------------")

    print("Part (b)")
    print("---------------------------------------")
    print("Test Case 1 (100 trials): ")
    student_ans_1 = large_numbers_dice(100)
    print("Test Case 1 (Your Answer):", student_ans_1)
    print()
    print("Test Case 2 (500 trials): ")
    student_ans_2 = large_numbers_dice(500)
    print("Test Case 2 (Your Answer):", student_ans_2)
    print("---------------------------------------")

    print("Part (c)")
    print("---------------------------------------")
    print("Test Case 1 (100 trials): ")
    student_ans_1 = large_numbers_rigged_dice(100)
    print("Test Case 1 (Your Answer):", student_ans_1)
    print()
    print("Test Case 2 (500 trials): ")
    student_ans_2 = large_numbers_rigged_dice(500)
    print("Test Case 2 (Your Answer):", student_ans_2)
    print("---------------------------------------")

    print("Part (d)")
    print("---------------------------------------")
    print("Plotting 5 trials...(remember to exit out of the pyplot window to continue the program) ")
    large_numbers_histogram(5)
    print()
    print("Plotting 10 trials...(remember to exit out of the pyplot window to continue the program) ")
    large_numbers_histogram(10)
    print("Plotting 50 trials...(remember to exit out of the pyplot window to continue the program) ")
    large_numbers_histogram(50)
    print("Plotting 100 trials...(remember to exit out of the pyplot window to continue the program) ")
    large_numbers_histogram(100)
    print("Plotting 500 trials...(remember to exit out of the pyplot window to continue the program) ")
    large_numbers_histogram(500)

    print("Part (e)")
    print("---------------------------------------")
    print("Plotting line plot for 100000: ")
    large_numbers_plot(100000)

    ## ONLY UNCOMMENT THE TEST CASES BELOW IF YOU ARE DOING THE EXTRA CREDIT ##
    #'''
    print("---------------------------------------")
    print("PART 2B: Central Limit Theorem")
    print("---------------------------------------")
    print("Part (a)")
    print("---------------------------------------")
    print("Plotting (n = 5, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(5, 100)
    print()
    print("Plotting (n = 10, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(10, 100)
    print("Plotting (n = 50, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(50, 100)
    print("Plotting (n = 100, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(100, 100)
    print("Plotting (n = 5, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(5, 1000)
    print("Plotting (n = 10, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(10, 1000)
    print("Plotting (n = 100, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(100, 1000)
    print("Plotting (n = 1000, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_uniform(1000, 1000)
    print("Part (b)")
    print("---------------------------------------")
    print("Plotting (n = 5, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(5, 100)
    print()
    print("Plotting (n = 10, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(10, 100)
    print("Plotting (n = 50, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(50, 100)
    print("Plotting (n = 100, k = 100)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(100, 100)
    print("Plotting (n = 5, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(5, 1000)
    print("Plotting (n = 10, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(10, 1000)
    print("Plotting (n = 100, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(100, 1000)
    print("Plotting (n = 1000, k = 1000)...(remember to exit out of the pyplot window to continue the program) ")
    clt_gamma(1000, 1000)
    #'''
